library(lubridate) #convert whole columns to dates
library(zoo) #dates as year month
library(canadianmaps) #import annotated map of Canada
library(sf) # spatial data
library(sp) #Spatial Points function
library(rstudioapi) #for creating colour palette
library(grDevices) #for creating colour palette
library(fBasics) #for creating colour palette
library(mgcv) #gam
library(terra) #shape file
library(xml2)
library(rvest)
library(raster)
# importing data
animals_involved <- read.csv("data/pca-human-wildlife-coexistence-animals-involved-detailed-records-2010-2021.csv")
# import coordinates of all national parks, coordinates obtained from Google Maps
park_coordinates <- read.csv("data/park_coordinates.csv")
# convert coordinates into spatial data
park_location <- SpatialPoints(select(park_coordinates, longitude, latitude))
# convert coordinates into spatial data
#park_location <- SpatialPoints(select(park_coordinates, longitude, latitude))
park_location <- SpatialPoints(park_coordinates[, c("longitude", "latitude")])
# plot parks
plot(canadashape)
sp::plot(park_location, add = TRUE, col = 'coral', pch = 19, cex = 0.5)
unique(animals_involved$Incident.Type)
# filter out all the human wildlife interactions ----
HWI <- animals_involved %>%
filter(Incident.Type %in% c("Human Wildlife Interaction"))
unique(HWI)
unique(HWI$Incident.Number)
summary(HWI)
#Count number of incidents by park
incident_count <- HWI_parks %>%
count(HWI_parks$park)
# Cleaning the species by omitting unknowns
HWI_parks <- HWI_parks[HWI_parks$species != "None",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown bear",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown bird",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown bat",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown ungulate",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown gull",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown canid",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown snake",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown fish",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown Duck",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown grouse",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown rodent",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown Myotis bat",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown raptor",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown owl",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown sea lion",]
HWI_parks <- HWI_parks[HWI_parks$species != "Unknown deer",]
View(HWI_parks)
unique(HWI_parks$Incident.Number)
summary(HWI_parks)
# Loading packages ----
options(timeout = max(1000, getOption("timeout")))
library(lattice) # for making graphs
library(knitr) # for knitting
library(ggplot2) # for scatter plot
library(dplyr) # for pipes
library(skimr) # for skimming data
library(tidyverse) #summing
library(lubridate) #convert whole columns to dates
library(zoo) #dates as year month
library(canadianmaps) #import annotated map of Canada
library(sf) # spatial data
library(sp) #Spatial Points function
library(rstudioapi) #for creating colour palette
library(grDevices) #for creating colour palette
library(fBasics) #for creating colour palette
library(mgcv) #gam
library(terra) #shape file
library(xml2)
library(rvest)
library(raster)
nc.year_dir
setwd(nc.year_dir)
plot(jasper_shape)
# List all year folders in the ndvi directory
year_folders <- list.dirs(path = nc.year_dir, full.names = TRUE, recursive = FALSE)
year_folders
nc.year_dir <- "C:/Users/grace/Documents/GitHub/HWI_parks/ndvi"
setwd(nc.year_dir)
# List all year folders in the ndvi directory
year_folders <- list.dirs(path = nc.year_dir, full.names = TRUE, recursive = FALSE)
year_folders
1:length(year_folders)
# Extract year from the directory path
file_year <- tools::file_path_sans_ext(basename(nc.year_dir))
file_year
# Extract year from the directory path
file_year <- gsub(pattern = "ndvi",
replacement = "",
x = gsub(pattern = "C:/Users/grace/Documents/GitHub/HWI_parks/ndvi/",
replacement = "",
x = year_folders[i]))
file_year
i
year_folders[i]
i <- 1
year_folders[i]
# Extract year from the directory path
file_year <- gsub(pattern = "ndvi",
replacement = "",
x = gsub(pattern = "C:/Users/grace/Documents/GitHub/HWI_parks/ndvi/",
replacement = "",
x = year_folders[i]))
file_year
# Create a folder for the current year in the output directory
output_year_dir <- file.path(output_dir, file_year)
output_year_dir
# List all month folders in the year folder
month_folders <- list.dirs(path = year_folders, full.names = TRUE, recursive = FALSE)
month_folders
# List all month folders in the year folder
month_folders <- list.dirs(path = year_folders[i], full.names = TRUE, recursive = FALSE)
month_folders
# Make a list of the files in the month directory
nc.files <- list.files(path = month_folders[j], pattern = "*.nc", full.names = TRUE)
j <- 1
# Make a list of the files in the month directory
nc.files <- list.files(path = month_folders[j], pattern = "*.nc", full.names = TRUE)
nc.files
k <- 1
# make the spatrasters
spat <- rast(nc.files[k]) # took 2012 nov 2, 10, oct 9, 10/ 2018 nov 6 out to run this
plot(spat)
spat <- spat[[which(names(spat) == "NDVI")]]
plot(spat)
crs(jasper_shape)
CRS_canada <- crs(jasper_shape)
# Reproject the raster to the CRS of jasper_shape
reprojected_spat <- terra::project(spat, CRS_canada, method = "near")
plot(reprojected_spat)
crs(reprojected_spat)
# make the spatrasters
spat <- rast(nc.files[k]) # took 2012 nov 2, 10, oct 9, 10/ 2018 nov 6 out to run this
spat <- spat[[which(names(spat) == "NDVI")]]
crs(spat)
# Reproject the raster to the CRS of jasper_shape
reprojected_spat <- terra::project(spat, CRS_canada, method = "near")
# import all of the boundaries for Canadian parks
CAshape <- st_read("C:/Users/grace/Documents/GitHub/HWI_parks/data/CLAB_CA_2023-09-08")
# Create a list of the names of the 25 parks to be studied
test_parks <- c("WATE", "ELKI", "JASP", "WOOD",
"BANF", "YOHO", "KOOT", "REVE",
"PRIM", "GLAC", "WAPU", "FUND",
"KOUC", "NOVA", "KEJI", "AULA",
"NAHA", "FIVE", "PELE", "GBIS",
"THIS", "PEIS", "FORI", "PALB", "IVVA")
# Generate an empty list for storing results
res <- list()
#Loop over the vector of park names to extract the NDVI information
for(l in 1:length(test_parks)){
#Extract the desired park contour
PARK <- CAshape[CAshape$CLAB_ID %in% test_parks[l],]
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE)
# Get mean and variance in NDVI
NDVI <- mean(cropped_spat)
#NDVI_var <- var(cropped_spat)
NDVI_sd <- stdev(cropped_spat)
# Store as a data frame in the list
res[[l]] <- data.frame(park = test_parks[l],
date = file_month,
ndvi = NDVI,
ndvi_var = NDVI_sd)
} #close the loop over parks
#Extract the desired park contour
PARK <- CAshape[CAshape$CLAB_ID %in% test_parks[l],]
plot(PARK)
test_parks[[l]]
l
RES
res
stdev(cropped_spat)
mean(cropped_spat)
# Get mean and variance in NDVI
NDVI <- mean(cropped_spat)
NDVI
# Get mean and variance in NDVI
NDVI <- terra::mean(cropped_spat)
NDVI
?mean
# Get mean and variance in NDVI
NDVI <- terra::mean(cropped_spat, na.rm = TRUE)
NDVI
plot(NDVI)
class(NDVI)
# Get mean and variance in NDVI
NDVI <- terra::global(cropped_spat, 'mean', na.rm = TRUE)
NDVI
# Get mean and variance in NDVI
NDVI <- terra::global(na.omit(cropped_spat), 'mean')
NDVI
plot(na.omit(cropped_spat))
plot(cropped_spat)
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE)
plot(cropped_spat)
l
l <- 1
#Extract the desired park contour
PARK <- CAshape[CAshape$CLAB_ID %in% test_parks[l],]
# Generate an empty list for storing results
res <- list()
plot(PARK)
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE)
plot(cropped_spat)
plot(PARK, add = TRUE)
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK)
plot(cropped_spat)
# crop the NDVI raster to the park
cropped_spat <- mask(reprojected_spat, PARK)
plot(cropped_spat)
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE)
plot(cropped_spat)
plot(PARK, add = TRUE)
class(PARK)
PARK <- vect(PARK)
class(PARK)
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE)
plot(cropped_spat)
CRS(cropped_spat)
crs(PARK)
crs(PARK) == crs(cropped_spat)
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE, snap = "in")
plot(cropped_spat)
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE, snap = "in")
plot(cropped_spat)
mean(cropped_spat)
terra::global(na.omit(cropped_spat), 'mean')
test <- mean(cropped_spat)
test$mean
values(cropped_spat)
mean(values(cropped_spat), na.action = na.omit)
mean(values(cropped_spat), na.rm = TRUE)
# Get mean and variance in NDVI
NDVI <- mean(values(cropped_spat), na.rm = TRUE)
#NDVI_var <- var(cropped_spat)
NDVI_var <- var(values(cropped_spat), na.rm = TRUE)
# Store as a data frame in the list
res[[l]] <- data.frame(park = test_parks[l],
date = file_month,
ndvi = NDVI,
ndvi_var = NDVI_var)
RES
res
nc.files[k]
year <- gsub(pattern = "ndvi",
replacement = "",
x = gsub(pattern = "C:/Users/grace/Documents/GitHub/HWI_parks/ndvi/",
replacement = "",
x = year_folders[i]))
year
paste(year,j,k,sep = "_")
# Generate an empty list for storing results
res <- list()
#Loop over the vector of park names to extract the NDVI information
for(l in 1:length(test_parks)){
#Extract the desired park contour
PARK <- CAshape[CAshape$CLAB_ID %in% test_parks[l],]
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE, snap = "in")
# Get mean and variance in NDVI
NDVI <- mean(values(cropped_spat), na.rm = TRUE)
#NDVI_var <- var(cropped_spat)
NDVI_var <- var(values(cropped_spat), na.rm = TRUE)
# Store as a data frame in the list
res[[l]] <- data.frame(park = test_parks[l],
date = paste(year,j,k,sep = "_"),
ndvi = NDVI,
ndvi_var = NDVI_var)
} #close the loop over parks
#clean up the results
RES <- do.call(rbind,res)
RES
# Generate an empty list for storing results
res <- list()
#Loop over the vector of park names to extract the NDVI information
for(l in 1:length(test_parks)){
#Extract the desired park contour
PARK <- CAshape[CAshape$CLAB_ID %in% test_parks[l],]
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE)
# Get mean and variance in NDVI
NDVI <- mean(values(cropped_spat), na.rm = TRUE)
#NDVI_var <- var(cropped_spat)
NDVI_var <- var(values(cropped_spat), na.rm = TRUE)
# Store as a data frame in the list
res[[l]] <- data.frame(park = test_parks[l],
date = paste(year,j,k,sep = "_"),
ndvi = NDVI,
ndvi_var = NDVI_var)
} #close the loop over parks
#clean up the results
RES <- do.call(rbind,res)
RES
# Generate an empty list for storing results
res_day <- list()
# Generate an empty list for storing results
res_day <- list()
# Loop through all the ndvi files for the current month
for (k in 1:length(nc.files)) {
# make the spatrasters
spat <- rast(nc.files[k]) # took 2012 nov 2, 10, oct 9, 10/ 2018 nov 6 out to run this
spat <- spat[[which(names(spat) == "NDVI")]]
# Reproject the raster to the CRS of jasper_shape
reprojected_spat <- terra::project(spat,
CRS_canada,
method = "near")
# Generate an empty list for storing results
res <- list()
#Loop over the vector of park names to extract the NDVI information
for(l in 1:length(test_parks)){
#Extract the desired park contour
PARK <- CAshape[CAshape$CLAB_ID %in% test_parks[l],]
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE)
# Get mean and variance in NDVI
NDVI <- mean(values(cropped_spat), na.rm = TRUE)
#NDVI_var <- var(cropped_spat)
NDVI_var <- var(values(cropped_spat), na.rm = TRUE)
# Store as a data frame in the list
res[[l]] <- data.frame(park = test_parks[l],
date = paste(year,j,k,sep = "_"),
ndvi = NDVI,
ndvi_var = NDVI_var)
} #close the loop over parks
#clean up the results
res_day[[k]] <- do.call(rbind,res)
} #close of day loop
res_day
#clean up the results over the months of the year
res_month[[j]] <- do.call(rbind,res_day)
# Generate an empty list for storing daily results
res_month <- list()
#clean up the results over the months of the year
res_month[[j]] <- do.call(rbind,res_day)
res_month
View(res_month)
test <- data.frame(res_month)
test <- do.call(rbind, res_month)
View(test)
# Loading packages ----
options(timeout = max(1000, getOption("timeout")))
library(lattice) # for making graphs
library(knitr) # for knitting
library(ggplot2) # for scatter plot
library(dplyr) # for pipes
library(skimr) # for skimming data
library(tidyverse) #summing
library(lubridate) #convert whole columns to dates
library(zoo) #dates as year month
library(canadianmaps) #import annotated map of Canada
library(sf) # spatial data
library(sp) #Spatial Points function
library(rstudioapi) #for creating colour palette
library(grDevices) #for creating colour palette
library(fBasics) #for creating colour palette
library(mgcv) #gam
library(terra) #shape file
library(xml2)
library(rvest)
library(raster)
nc.year_dir <- "C:/Users/grace/Documents/GitHub/HWI_parks/ndvi"
setwd(nc.year_dir)
# import all of the boundaries for Canadian parks
CAshape <- st_read("C:/Users/grace/Documents/GitHub/HWI_parks/data/CLAB_CA_2023-09-08")
# Create a list of the names of the 25 parks to be studied
test_parks <- c("WATE", "ELKI", "JASP", "WOOD",
"BANF", "YOHO", "KOOT", "REVE",
"PRIM", "GLAC", "WAPU", "FUND",
"KOUC", "NOVA", "KEJI", "AULA",
"NAHA", "FIVE", "PELE", "GBIS",
"THIS", "PEIS", "FORI", "PALB", "IVVA")
# import JASP shapefile
jasper_shape <- readRDS("../rds/jasper.rds")
# Define the CRS
CRS_canada <- crs(jasper_shape)
# List all year folders in the ndvi directory
year_folders <- list.dirs(path = nc.year_dir, full.names = TRUE, recursive = FALSE)
RESULTS <- list()
# Loop through each year folder
for (i in 1:length(i:1)) { #length(year_folders)
year <- gsub(pattern = "ndvi",
replacement = "",
x = gsub(pattern = "C:/Users/grace/Documents/GitHub/HWI_parks/ndvi/",
replacement = "",
x = year_folders[i]))
# List all month folders in the year folder
month_folders <- list.dirs(path = year_folders[i],
full.names = TRUE,
recursive = FALSE)
# Generate an empty list for storing daily results
res_month <- list()
# Loop through each month folder
for (j in 1:length(month_folders)) {
# Make a list of the files in the month directory
nc.files <- list.files(path = month_folders[j],
pattern = "*.nc",
full.names = TRUE)
# Generate an empty list for storing daily results
res_day <- list()
# Loop through all the ndvi files for the current month
for (k in 1:length(nc.files)) {
# make the spatrasters
spat <- rast(nc.files[k]) # took 2012 nov 2, 10, oct 9, 10/ 2018 nov 6 out to run this
spat <- spat[[which(names(spat) == "NDVI")]]
# Reproject the raster to the CRS of jasper_shape
reprojected_spat <- terra::project(spat,
CRS_canada,
method = "near")
# Generate an empty list for storing results
res <- list()
#Loop over the vector of park names to extract the NDVI information
for(l in 1:length(test_parks)){
#Extract the desired park contour
PARK <- CAshape[CAshape$CLAB_ID %in% test_parks[l],]
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE)
# Get mean and variance in NDVI
NDVI <- mean(values(cropped_spat), na.rm = TRUE)
#NDVI_var <- var(cropped_spat)
NDVI_var <- var(values(cropped_spat), na.rm = TRUE)
# Store as a data frame in the list
res[[l]] <- data.frame(park = test_parks[l],
date = paste(year,j,k,sep = "_"),
ndvi = NDVI,
ndvi_var = NDVI_var)
} #close the loop over parks
#clean up the results over the days of the month
res_day[[k]] <- do.call(rbind,res)
} #close of day loop
#clean up the results over the months of the year
res_month[[j]] <- do.call(rbind,res_day)
} # close of the month loop
#clean up the results over the months of the year
RESULTS[[i]] <- do.call(rbind,res_month)
} # close of year loop
# convert the final list to a data frame
RESULTS <- do.call(rbind,RESULTS)
View(RESULTS)
# Loop through each year folder
for (i in 1:length(i:2)) { #length(year_folders)
year <- gsub(pattern = "ndvi",
replacement = "",
x = gsub(pattern = "C:/Users/grace/Documents/GitHub/HWI_parks/ndvi/",
replacement = "",
x = year_folders[i]))
# List all month folders in the year folder
month_folders <- list.dirs(path = year_folders[i],
full.names = TRUE,
recursive = FALSE)
# Generate an empty list for storing daily results
res_month <- list()
# Loop through each month folder
for (j in 1:length(month_folders)) {
# Make a list of the files in the month directory
nc.files <- list.files(path = month_folders[j],
pattern = "*.nc",
full.names = TRUE)
# Generate an empty list for storing daily results
res_day <- list()
# Loop through all the ndvi files for the current month
for (k in 1:length(nc.files)) {
# make the spatrasters
spat <- rast(nc.files[k]) # took 2012 nov 2, 10, oct 9, 10/ 2018 nov 6 out to run this
spat <- spat[[which(names(spat) == "NDVI")]]
# Reproject the raster to the CRS of jasper_shape
reprojected_spat <- terra::project(spat,
CRS_canada,
method = "near")
# Generate an empty list for storing results
res <- list()
#Loop over the vector of park names to extract the NDVI information
for(l in 1:length(test_parks)){
#Extract the desired park contour
PARK <- CAshape[CAshape$CLAB_ID %in% test_parks[l],]
# crop the NDVI raster to the park
cropped_spat <- crop(reprojected_spat, PARK, mask = TRUE)
# Get mean and variance in NDVI
NDVI <- mean(values(cropped_spat), na.rm = TRUE)
#NDVI_var <- var(cropped_spat)
NDVI_var <- var(values(cropped_spat), na.rm = TRUE)
# Store as a data frame in the list
res[[l]] <- data.frame(park = test_parks[l],
date = paste(year,j,k,sep = "_"),
ndvi = NDVI,
ndvi_var = NDVI_var)
} #close the loop over parks
#clean up the results over the days of the month
res_day[[k]] <- do.call(rbind,res)
} #close of day loop
#clean up the results over the months of the year
res_month[[j]] <- do.call(rbind,res_day)
} # close of the month loop
#clean up the results over the months of the year
RESULTS[[i]] <- do.call(rbind,res_month)
} # close of year loop
# convert the final list to a data frame
RESULTS <- do.call(rbind,RESULTS)
View(RESULTS)
